<?php
  
//chdir(dirname(__DIR__));
//set_include_path('/var/www/valuation/ip/api/');
require_once('vendor/JWT/JWT.php');
require_once('lib/password.php');
require_once('lib/Request.php');
require_once('config/Config.php');
require_once('lib/DbUtils.php');

use IP\Request as Request;
use IP\Config as Config;
use IP\DbUtils as DB;

$request = new Request();
$db = new DB();

$request->setAccessHeader();
if ($request->handleOptions()) {
    error_log('Option request. Exit...', 0);
    exit;
}

if (!$request->isPOST()) {
    error_log('Only POST method allowed', 0);
    header('HTTP/1.0 405 Method Not Allowed');
    exit;
}

$input = $request->getJSON();

/*
 * Simple sanitization
 */
//$username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
//$password = filter_input(INPUT_POST, 'password', FILTER_SANITIZE_STRING);
$username = $input->username;
$password = $input->password;

if (!($username && $password )) {
    header('HTTP/1.0 400 Bad Request');
    exit;
}

try {
   
    $rs =$db->getUser($username);
    
    //$rs = ['id'=> 1,
      //     'password' => password_hash('test123', PASSWORD_DEFAULT),
        //   'name' => 'satheesan',
          // 'role' => 'Admin'];

    if ($rs) {
        /*
         * Password was generated by password_hash(), so we need to use
         * password_verify() to check it.
         * 
         * @see http://php.net/manual/en/ref.password.php
         */
        error_log("password: ". $rs['password'], 0);
        error_log("password: ". password_hash($password, PASSWORD_DEFAULT), 0);
        if (password_verify($password, $rs['password'])) {

            if($rs['status'] == 'Pending') {
                error_log($rs['status']);
                header('HTTP/1.0 401 Unauthorized');
                
                $unencodedArray = [
                    'message' => 'Pending Approval!!',
                ];
            
                echo json_encode($unencodedArray);
                exit;
            } 
		
		error_log( "Token creating ...");
            $tokenId    = base64_encode(mcrypt_create_iv(32, MCRYPT_RAND));
		error_log( "Token creating done...");
            $issuedAt   = time();
            $notBefore  = $issuedAt + 10;  //Adding 10 seconds
            $expire     = $notBefore + Config::JWT_EXP_SECONDS; // Adding 60 seconds
            $serverName = Config::SERVER_NAME;
            unset($rs['password']);
            
            /*
             * Create the token as an array
             */
            $data = [
                'iat'  => $issuedAt,         // Issued at: time when the token was generated
                'jti'  => $tokenId,          // Json Token Id: an unique identifier for the token
                'iss'  => $serverName,       // Issuer
                'nbf'  => $notBefore,        // Not before
                'exp'  => $expire,           // Expire
                'data' => $rs
            ];
            
            error_log(json_encode($rs));
            header('Content-type: application/json');

            /*
             * Extract the key, which is coming from the config file. 
             * 
             * Best suggestion is the key to be a binary string and 
             * store it in encoded in a config file. 
             *
             * Can be generated with base64_encode(openssl_random_pseudo_bytes(64));
             *
             * keep it secure! You'll need the exact key to verify the 
             * token later.
             */
            $secretKey = base64_decode(Config::JWT_KEY);

            /*
             * Extract the algorithm from the config file too
             */
            $algorithm = Config::JWT_ALGORITHM;

            /*
             * Encode the array to a JWT string.
             * Second parameter is the key to encode the token.
             * 
             * The output string can be validated at http://jwt.io/
             */
            $jwt = JWT::encode(
                $data,      //Data to be encoded in the JWT
                $secretKey, // The signing key
                /* // Algorithm used to sign the token,
                see https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40#section-3 */
                $algorithm
            );

            $unencodedArray = [
                                'token' => $jwt,
                                'user' => $rs
                              ];
            
            echo json_encode($unencodedArray);
        } else {
            header('HTTP/1.0 401 Unauthorized');
        }
    } else {
        header('HTTP/1.0 404 Not Found');
    }
} catch (Exception $e) {
    error_log($e, 0);
    header('HTTP/1.0 500 Internal Server Error');
}
